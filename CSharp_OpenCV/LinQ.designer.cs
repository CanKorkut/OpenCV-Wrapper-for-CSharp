#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSharp_OpenCV
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OpenCV_Database")]
	public partial class LinQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMIA(MIA instance);
    partial void UpdateMIA(MIA instance);
    partial void DeleteMIA(MIA instance);
    #endregion
		
		public LinQDataContext() : 
				base(global::CSharp_OpenCV.Properties.Settings.Default.OpenCV_DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MIA> MIAs
		{
			get
			{
				return this.GetTable<MIA>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MIA")]
	public partial class MIA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Image_Name;
		
		private string _Sekil_Sayisi;
		
		private System.Nullable<int> _Renk_Sayisi;
		
		private System.Data.Linq.Binary _Resim;
		
		private string _Tarih;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImage_NameChanging(string value);
    partial void OnImage_NameChanged();
    partial void OnSekil_SayisiChanging(string value);
    partial void OnSekil_SayisiChanged();
    partial void OnRenk_SayisiChanging(System.Nullable<int> value);
    partial void OnRenk_SayisiChanged();
    partial void OnResimChanging(System.Data.Linq.Binary value);
    partial void OnResimChanged();
    partial void OnTarihChanging(string value);
    partial void OnTarihChanged();
    #endregion
		
		public MIA()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Name", DbType="VarChar(20)")]
		public string Image_Name
		{
			get
			{
				return this._Image_Name;
			}
			set
			{
				if ((this._Image_Name != value))
				{
					this.OnImage_NameChanging(value);
					this.SendPropertyChanging();
					this._Image_Name = value;
					this.SendPropertyChanged("Image_Name");
					this.OnImage_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sekil_Sayisi", DbType="VarChar(50)")]
		public string Sekil_Sayisi
		{
			get
			{
				return this._Sekil_Sayisi;
			}
			set
			{
				if ((this._Sekil_Sayisi != value))
				{
					this.OnSekil_SayisiChanging(value);
					this.SendPropertyChanging();
					this._Sekil_Sayisi = value;
					this.SendPropertyChanged("Sekil_Sayisi");
					this.OnSekil_SayisiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Renk_Sayisi", DbType="Int")]
		public System.Nullable<int> Renk_Sayisi
		{
			get
			{
				return this._Renk_Sayisi;
			}
			set
			{
				if ((this._Renk_Sayisi != value))
				{
					this.OnRenk_SayisiChanging(value);
					this.SendPropertyChanging();
					this._Renk_Sayisi = value;
					this.SendPropertyChanged("Renk_Sayisi");
					this.OnRenk_SayisiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resim", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Resim
		{
			get
			{
				return this._Resim;
			}
			set
			{
				if ((this._Resim != value))
				{
					this.OnResimChanging(value);
					this.SendPropertyChanging();
					this._Resim = value;
					this.SendPropertyChanged("Resim");
					this.OnResimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tarih", DbType="VarChar(50)")]
		public string Tarih
		{
			get
			{
				return this._Tarih;
			}
			set
			{
				if ((this._Tarih != value))
				{
					this.OnTarihChanging(value);
					this.SendPropertyChanging();
					this._Tarih = value;
					this.SendPropertyChanged("Tarih");
					this.OnTarihChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
